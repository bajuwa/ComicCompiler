#!/bin/bash

# Requirements: ImageMagick (needs to be on PATH)

MIN_HEIGHT_PER_PAGE=5000
MAX_DIRECTORY_DEPTH=1
INPUT_IMAGE_NAME_PREFIX="image"
INPUT_IMAGE_FILE_EXTENSIONS=("jpg" "jpeg" "png")
OUTPUT_IMAGE_FILE_EXTENSION="png"
OUTPUT_PAGE_NAME_PREFIX="page"
MERGE_FILE_TYPES=false
MAX_WIDTH=0
MIN_WIDTH=0
INPUT_DIRECTORY="./"
OUTPUT_DIRECTORY="./Compiled/" # Default to subdirectory to prevent potential for output files to be used as input if rerun
SPLIT_ON_COLOUR=65535 # Decimal colour value (65535 = white)
COLOUR_ERROR_TOLERANCE=0 # Just in case your 'whites' aren't perfectly white
WHITESPACE_BREAK_MODE=0 # 0 for 'end of image', 1 for 'any whitespace within image'
BREAK_POINT_ROW_CHECK_INCREMENTS=10
BREAK_POINT_ROW_CHECK_BATCH_MULTIPLIER=20
LOGGING_MODE=0 # 0 for normal, 1 for debug, 2 for verbose
CONFIRM_EXIT=0 # 0 for true, 1 for false

# ImageMagick commands (change depending on version, default v7)
IM_VERSION=7
IM_IDENTIFY="magick identify"
IM_CONVERT="magick convert"

# Parse for optional arguments
for i in "$@"
do
case $1 in
    -h|--min-height-per-page)
    MIN_HEIGHT_PER_PAGE=$2
    shift # past argument=value
    ;;
	-mw|--min-image-width)
    MIN_WIDTH=$2
    shift # past argument=value
    ;;
	-Mw|--max-image-width)
    MAX_WIDTH=$2
    shift # past argument=value
    ;;
	-fw|--force-width)
    MIN_WIDTH=$2
	MAX_WIDTH=$2
    shift # past argument=value
    ;;
    -i|--input-file-prefix)
    INPUT_IMAGE_NAME_PREFIX=$2
    shift # past argument=value
    ;;
    -c|--split-on-colour|--split-on-color)
    SPLIT_ON_COLOUR=$2
    shift # past argument=value
    ;;
    -ce|--colour-error-tolerance|--color-error-tolerance)
    COLOUR_ERROR_TOLERANCE=$2
    shift # past argument=value
    ;;
    -e|--extension)
    INPUT_IMAGE_FILE_EXTENSIONS=($2)
	OUTPUT_IMAGE_FILE_EXTENSION=$2
    shift # past argument=value
    ;;
	-ae|--additional-extension)
    INPUT_IMAGE_FILE_EXTENSIONS+=($2)
    shift # past argument=value
    ;;
	-oe|--output-extension)
	OUTPUT_IMAGE_FILE_EXTENSION=$2
    shift # past argument=value
    ;;
    -o|--output-file-prefix)
    OUTPUT_PAGE_NAME_PREFIX=$2
    shift # past argument=value
    ;;
    -id|--input-directory)
    INPUT_DIRECTORY=$2
    shift # past argument=value
    ;;
    -od|--output-directory)
    OUTPUT_DIRECTORY=$2
    shift # past argument=value
    ;;
    -m|--whitespace-break-mode)
    WHITESPACE_BREAK_MODE=$2
    shift # past argument=value
    ;;
    -bi|--break-points-increment)
    BREAK_POINT_ROW_CHECK_INCREMENTS=$2
    shift # past argument=value
    ;;
    -bm|--break-points-multiplier)
    BREAK_POINT_ROW_CHECK_BATCH_MULTIPLIER=$2
    shift # past argument=value
    ;;
    -l|--logging-mode)
    LOGGING_MODE=$2
    shift # past argument=value
    ;;

    --debug)
    LOGGING_MODE=1
    ;;
    --verbose)
    LOGGING_MODE=2
    ;;
    -im6)
	IM_VERSION=6
	IM_IDENTIFY="identify"
	IM_CONVERT="convert"
    ;;
    -im7)
	IM_VERSION=7
	IM_IDENTIFY="magick identify"
	IM_CONVERT="magick convert"
    ;;
    -np|--no-prefix)
	INPUT_IMAGE_NAME_PREFIX=""
	;;
	-oh|--output-here)
	OUTPUT_DIRECTORY="./"
	;;
	-is|--include-subdirectory)
	MAX_DIRECTORY_DEPTH=1000
	;;
	-x)
    CONFIRM_EXIT=1
    ;;
esac
shift
done

hash $IM_IDENTIFY 2>/dev/null || { echo >&2 "I require the ImageMagick command '$IM_IDENTIFY' but it's not installed.  Aborting."; exit 1; }
hash $IM_CONVERT 2>/dev/null || { echo >&2 "I require the ImageMagick command '$IM_CONVERT' but it's not installed.  Aborting."; exit 1; }

if [ $LOGGING_MODE -ge 1 ]
then
	echo "Running ComCom with options: "
	echo "LOGGING_MODE=$LOGGING_MODE"
	echo "IM_VERSION=$IM_VERSION"
	echo "MIN_HEIGHT_PER_PAGE=$MIN_HEIGHT_PER_PAGE"
	echo "INPUT_IMAGE_NAME_PREFIX=$INPUT_IMAGE_NAME_PREFIX"
	echo "OUTPUT_PAGE_NAME_PREFIX=$OUTPUT_PAGE_NAME_PREFIX"
	echo "INPUT_DIRECTORY=$INPUT_DIRECTORY"
	echo "OUTPUT_DIRECTORY=$OUTPUT_DIRECTORY"
	echo "INPUT_IMAGE_FILE_EXTENSIONS=$INPUT_IMAGE_FILE_EXTENSIONS"
	echo "SPLIT_ON_COLOUR=$SPLIT_ON_COLOUR"
	echo "COLOUR_ERROR_TOLERANCE=$COLOUR_ERROR_TOLERANCE"
	echo "WHITESPACE_BREAK_MODE=$WHITESPACE_BREAK_MODE"
	echo "BREAK_POINT_ROW_CHECK_INCREMENTS=$BREAK_POINT_ROW_CHECK_INCREMENTS"
	echo "BREAK_POINT_ROW_CHECK_BATCH_MULTIPLIER=$BREAK_POINT_ROW_CHECK_BATCH_MULTIPLIER"
	echo ""
fi

# Setup global vars
cropFromTop=0
cropFromBottom=0
cropFromTopNextPage=0

function fileEndsInBreakPoint {
	fileSampling="$currentImageFileName["$currentImageWidth"x1+0+$((currentImageHeight-1))]"
	grayMeanValue=$($IM_IDENTIFY -format %[mean] $fileSampling)
	standardDeviation=$($IM_IDENTIFY -format %[standard-deviation] $fileSampling)
	colourDifference=$((${grayMeanValue%.*} - $SPLIT_ON_COLOUR))
	if [ ${colourDifference#-} -le $COLOUR_ERROR_TOLERANCE ] && [ ${standardDeviation%.*} -lt 1 ]
	then 
		[ $LOGGING_MODE -ge 1 ] && echo "This image ends in whitespace: " $currentImageFileName;
		true
	else 
		[ $LOGGING_MODE -ge 2 ] && echo "This image does not end in whitespace: " $currentImageFileName;
		false
	fi
};

# This is a super nasty/slow method because of how many identify calls being made....
# Maybe upgrade this to a binary search using fileMayContainBreakPoint?
function findBreakPoint {
	[ $LOGGING_MODE -ge 1 ] && echo "Scanning file for breakpoint: "$currentImageFileName
	
	outerBatchSize=$((BREAK_POINT_ROW_CHECK_INCREMENTS * BREAK_POINT_ROW_CHECK_BATCH_MULTIPLIER))
	rowBeingChecked=0;
	while [ $rowBeingChecked -lt $currentImageHeight ]
	do
		batchStart=$rowBeingChecked
		batchEnd=$((rowBeingChecked + outerBatchSize))
		batchEnd=$(( batchEnd >= currentImageHeight ? currentImageHeight-1 : batchEnd ))
		batchFileSample=$currentImageFileName"["$currentImageWidth"x1+0+"$rowBeingChecked"]"
		[ $LOGGING_MODE -ge 2 ] && echo "Checking batch for possible breakpoint: $batchStart-$batchEnd"
		if ! fileSampleContainsColour $batchFileSample $SPLIT_ON_COLOUR $COLOUR_ERROR_TOLERANCE
		then
			[ $LOGGING_MODE -ge 1 ] && echo "Colour not found in sample batch $batchStart-$batchEnd, skipping to next batch"
			rowBeingChecked=$((rowBeingChecked+outerBatchSize))
			continue
		else
			[ $LOGGING_MODE -ge 2 ] && echo "Colour found in sample batch $batchStart-$batchEnd, checking rows for breakpoint"
		fi
		
		for ((i = $rowBeingChecked; i < $batchEnd; i+=$BREAK_POINT_ROW_CHECK_INCREMENTS))
		do
			fileSampling=$currentImageFileName"["$currentImageWidth"x1+0+"$i"]"
			grayMeanValue=$($IM_IDENTIFY -format %[mean] $fileSampling)
			colourDifference=$((${grayMeanValue%.*} - $SPLIT_ON_COLOUR))
			#[ $LOGGING_MODE -ge 2 ] && echo "Testing if mean gray value $grayMeanValue is within error tolerance $COLOUR_ERROR_TOLERANCE of breakpoint colour $SPLIT_ON_COLOUR, calculating difference: $colourDifference"
			if [ ${colourDifference#-} -le $COLOUR_ERROR_TOLERANCE ]
			then 
				#[ $LOGGING_MODE -ge 2 ] && echo "Colour value $grayMeanValue was within tolerance $SPLIT_ON_COLOUR +-$COLOUR_ERROR_TOLERANCE"
				standardDeviation=$($IM_IDENTIFY -format %[standard-deviation] $fileSampling)
				if [ ${standardDeviation%.*} -eq 0 ]
				then 
					cropFromBottom=$((currentImageHeight-i-1))
					cropFromTopNextPage=$i
					[ $LOGGING_MODE -ge 1 ] && echo "Found whitespace breakpoint in: "$currentImageFileName
					[ $LOGGING_MODE -ge 2 ] && echo "cropFromBottom: "$cropFromBottom
					[ $LOGGING_MODE -ge 2 ] && echo "cropFromTopNextPage: "$cropFromTopNextPage
					return 0
				else 
					[ $LOGGING_MODE -ge 2 ] && echo "Colour value $grayMeanValue was within tolerance $SPLIT_ON_COLOUR +-$COLOUR_ERROR_TOLERANCE but standard-deviation was $standardDeviation"
				fi
			fi
		done
		
		rowBeingChecked=$((rowBeingChecked+outerBatchSize))
	done

	# If we couldn't find a breakpoint, then return 0's
	cropFromBottom=0
	cropFromTopNextPage=0
	[ $LOGGING_MODE -ge 2 ] && echo "Could not find whitespace breakpoint in: "$currentImageFileName
	return 1
};

function fileSampleContainsColour {
	fileSample=$1
	colourToTest=$2
	colourErrorTolerance=$3
	
	[ $LOGGING_MODE -ge 2 ] && echo "Checking line for colour $colourToTest using sampling:" $fileSample;

	grayMinValue=$($IM_IDENTIFY -format %[min] $fileSample)
	grayMaxValue=$($IM_IDENTIFY -format %[max] $fileSample)
	[ $LOGGING_MODE -ge 2 ] && echo "File colour range: $grayMinValue-$grayMaxValue";
	
	if [ $((colourToTest + colourErrorTolerance)) -ge $grayMinValue ] || [ $grayMaxValue -ge $((colourToTest - colourErrorTolerance)) ]
	then
		[ $LOGGING_MODE -ge 2 ] && echo "File sampling contains breakpoint colour within error tolerance";
		return 0;
	else
		[ $LOGGING_MODE -ge 1 ] && echo "File sampling did not contain breakpoint colour within error tolerance";
		return 1;
	fi
}

function cropFromTopAndBottom {
	fileToCrop=$1
	pixelToCropFromTop=$2
	pixelToCropFromBottom=$3
	
	[ $LOGGING_MODE -ge 2 ] && echo "Cropping file $fileToCrop";
	[ $LOGGING_MODE -ge 2 ] && echo "pixelToCropFromTop: $pixelToCropFromTop";
	[ $LOGGING_MODE -ge 2 ] && echo "pixelToCropFromBottom: $pixelToCropFromBottom";
	
	pageTotalHeight=$($IM_IDENTIFY -format "%h" $fileToCrop)
	pageCroppedHeight=$((pageTotalHeight-pixelToCropFromTop-pixelToCropFromBottom))
	[ $LOGGING_MODE -ge 2 ] && echo "pageTotalHeight: $pageTotalHeight";
	[ $LOGGING_MODE -ge 2 ] && echo "pageCroppedHeight: $pageCroppedHeight";
	
	cropSampleRange=$currentImageWidth"x"$pageCroppedHeight"+0+"$pixelToCropFromTop
	[ $LOGGING_MODE -ge 1 ] && echo "Cropping: $fileToCrop[$cropSampleRange]";
	$IM_CONVERT -crop $cropSampleRange $fileToCrop $fileToCrop
	return
};

function resizeImages {
	if [[ $MIN_WIDTH -gt 0 || $MAX_WIDTH -gt 0 ]]; then
		for imageIndex in ${!imageFileNames[@]}; do
			image=${imageFileNames[$imageIndex]}
			currentImageWidth=$($IM_IDENTIFY -format "%w" $image)	
			currentImageHeight=$($IM_IDENTIFY -format "%h" $image)	
			if [[ $MIN_WIDTH -gt $currentImageWidth || $MAX_WIDTH -lt $currentImageWidth ]]; then
				mkdir -p "resized"
				for inputExtension in ${INPUT_IMAGE_FILE_EXTENSIONS[@]}; do 
					if [[ $image = *$inputExtension ]]; then
						imageName=${image%.*}
						extension=$inputExtension
					fi
				done
				renamedImage="resized/${imageName}_resized.$extension"
				if [[ $MIN_WIDTH -gt $currentImageWidth ]]; then
					$IM_CONVERT $image -resize "$MIN_WIDTHx$currentImageHeight<" $renamedImage
				elif [[ $MAX_WIDTH -lt $currentImageWidth ]]; then
					$IM_CONVERT $image -resize "$MAX_WIDTH" $renamedImage
				fi
				imageFileNames[$imageIndex]=$renamedImage
			fi
		done
	fi
};


function findBatchSizeForNextPage {
	[ $LOGGING_MODE -ge 1 ] && echo "Finding batch size for $pageFileName starting at $imageIndex";
	imageBatchSize=0;
	
	cumulativePageHeight=0;
	# find the next page separation spot (test for line of whitespace)
	while [ $imageBatchSize -lt $((totalImageCount-imageIndex)) ]
	do
		imageIndexToTest=$((imageIndex+imageBatchSize))
		currentImageFileName=${imageFileNames[$imageIndexToTest]}
		
		currentImageWidth=$($IM_IDENTIFY -format "%w" $currentImageFileName)
		currentImageHeight=$($IM_IDENTIFY -format "%h" $currentImageFileName)
		[ $LOGGING_MODE -ge 2 ] && echo "Current image dimensions (WxH): $currentImageWidth x $currentImageHeight";
		
		# Check if totalHeight + thisImagesHeight > minRequiredHeight
		# If so, start looking for whitespace at the minRequiredHeight - totalHeight
		# Add next images height to the overall height
		# If whitespace found, store cropFromBottom + cropFromTop for later and break loop
		if [ $cumulativePageHeight -ge $MIN_HEIGHT_PER_PAGE ] && [ $imageIndexToTest -lt $((totalImageCount-1)) ]
		then
			[ $LOGGING_MODE -ge 1 ] && echo "Reached min page height $MIN_HEIGHT_PER_PAGE, checking for breakpoint in $currentImageFileName";
			if [ $WHITESPACE_BREAK_MODE -eq 1 ] 
			then
				if findBreakPoint 
				then
					break
				fi
			else
				if fileEndsInBreakPoint
				then
					break
				fi
			fi
		else
			[ $LOGGING_MODE -ge 2 ] && echo "Haven't reach min page height $MIN_HEIGHT_PER_PAGE, current height: $cumulativePageHeight";
		fi
		cumulativePageHeight=$((cumulativePageHeight+currentImageHeight))
		imageBatchSize=$((imageBatchSize+1))
	done
};

function combineImages {
	pageIndex=0;
	imageIndex=0;
	totalImageCount=${#imageFileNames[@]};

	while [ $imageIndex -lt $totalImageCount ]
	do		
		pageFileName=$(printf "$OUTPUT_PAGE_NAME_PREFIX%03d.${OUTPUT_IMAGE_FILE_EXTENSION}" $pageIndex)
	
		findBatchSizeForNextPage
		
		# Now that we've picked out our image range, combine them to a single file
		echo "Combining "$((imageBatchSize+1))" images into '$pageFileName': $imageIndex - $((imageIndex+imageBatchSize))" 
		$IM_CONVERT -append ${imageFileNames[@]:$imageIndex:$imageBatchSize+1} -colorspace sRGB $OUTPUT_DIRECTORY$pageFileName;
		
		# If we have cropFromBottom/cropFromTop, then perform crop on recently created page
		if [ $((cropFromBottom+cropFromTop)) -gt 0 ]
		then
			cropFromTopAndBottom $OUTPUT_DIRECTORY$pageFileName $cropFromTop $cropFromBottom;
		else
			[ $LOGGING_MODE -ge 2 ] && echo "No cropping occurred for $pageFileName";
		fi
		
		if [ $cropFromBottom -eq 0 ]
		then
			imageBatchSize=$((imageBatchSize+1))
		fi
		
		# Increment our index for the next round
		pageIndex=$((pageIndex+1));
		imageIndex=$((imageIndex+imageBatchSize));
		cropFromTop=$cropFromTopNextPage;
		cropFromBottom=0;
		
		[ $LOGGING_MODE -ge 1 ] && echo "";
	done
};

# find all files to be combined
# allow using null-char for file name split (better array parsing) via: -print0 
imageFileNames=()
previousTotal=0
printf "Checking for File matches:\n"
for extension in ${INPUT_IMAGE_FILE_EXTENSIONS[@]}; do
	printf "Pattern: $INPUT_IMAGE_NAME_PREFIX*.$extension\n"
	while IFS=  read -r -d $'\0'; do
    	imageFileNames+=("$REPLY")
	done < <(find $INPUT_DIRECTORY -maxdepth $MAX_DIRECTORY_DEPTH -type f -iname "$INPUT_IMAGE_NAME_PREFIX*.$extension" -print0)
# echo ${imageFileNames[*]};
	printf "Found: $((${#imageFileNames[@]}-$previousTotal))\n"
	previousTotal=${#imageFileNames[@]}
done

if [ ${#imageFileNames[@]} -eq 0 ]; 
then
    printf "Couldn't find any images to combine\nSpecify -np if there is no file prefix or -e to specify a different file extension";
else
	start=$(date +%s)
	mkdir -p $OUTPUT_DIRECTORY;
	resizeImages
    combineImages;
	end=$(date +%s)
	totalTime=$(($end-$start))
	echo ""
	echo "Comic Compilation - Complete! (time: "$totalTime"s)"
fi

if [ $CONFIRM_EXIT -gt 0 ] 
then
	echo ""
	read -p "Press enter to exit"
fi
